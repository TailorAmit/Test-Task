[{"/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/index.tsx":"1","/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/reportWebVitals.ts":"2","/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/App.tsx":"3","/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/component/Spacex/index.tsx":"4","/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/component/Spacex/Query.tsx":"5","/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/container/CommonModal.tsx":"6","/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/component/ships/index.tsx":"7","/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/container/Compare.tsx":"8"},{"size":978,"mtime":1612154343533,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1612154343534,"results":"11","hashOfConfig":"10"},{"size":237,"mtime":1612166534067,"results":"12","hashOfConfig":"10"},{"size":12133,"mtime":1612166044115,"results":"13","hashOfConfig":"10"},{"size":450,"mtime":1612154343532,"results":"14","hashOfConfig":"10"},{"size":2522,"mtime":1612159952648,"results":"15","hashOfConfig":"10"},{"size":1038,"mtime":1612160036221,"results":"16","hashOfConfig":"10"},{"size":782,"mtime":1612166166136,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1rec7bv",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/index.tsx",[],["38","39"],"/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/reportWebVitals.ts",[],"/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/App.tsx",["40"],"import React from \"react\";\nimport logo from \"./logo.svg\";\nimport { Speacex } from \"./component/Spacex\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Speacex />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/component/Spacex/index.tsx",["41","42","43"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport {\n  AutoSizer,\n  List,\n  CellMeasurer,\n  CellMeasurerCache,\n} from \"react-virtualized\";\nimport {\n  TextField,\n  TableBody,\n  Grid,\n  TableHead,\n  TableContainer,\n  TableRow,\n  TableCell,\n  Paper,\n  Table,\n  Button,\n  Checkbox,\n} from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { LAUNCHESPAST } from \"./Query\";\nimport { CommonModal } from \"../../container/CommonModal\";\nimport { Ships } from \"../ships/index\";\nimport { CompareDates } from \"../../container/Compare\";\n\nconst useStyles = makeStyles(() => ({\n  AccountTableCss: {\n    \"& .MuiToolbar-regular\": {\n      minHeight: 0,\n    },\n  },\n  LabelStart: {\n    fontSize: 16,\n    paddingBottom: 10,\n    color: \"rgb(70, 81, 142)\",\n  },\n  Labelend: {\n    fontSize: 16,\n    paddingBottom: 10,\n    color: \"rgb(70, 81, 142)\",\n    textAlign: \"end\",\n  },\n  denseTable: {\n    \"& td\": { padding: \"2px 5px\", cursor: \"pointer\", textAlign: \"center\" },\n    \"& th\": { padding: \"5px 5px\", cursor: \"pointer\", textAlign: \"center\" },\n  },\n}));\n\ninterface Props {}\n\nexport const Speacex: React.FC<Props> = (props: Props) => {\n  //states\n  const [openModal, setOpenModal] = useState<boolean>(false);\n  const [openCompareModal, setOpenCompareModal] = useState<boolean>(false);\n  const [shipsData, setShipsData] = useState<any>();\n  const [resultData, setResultData] = useState<any>();\n  const [missionName, setMissionName] = useState<string>(\"\");\n  const [rocketName, setRocketName] = useState<string>(\"\");\n  const [CompareData, setCompareData] = useState<any>();\n\n  //class\n  const classes = useStyles();\n  //ref\n  const ListRef: any = React.useRef();\n\n  const cache = React.useRef(\n    new CellMeasurerCache({\n      fixedWidth: true,\n      defaultHeight: 100,\n    })\n  );\n\n  //graphql query or mutation\n  const { data, loading, error } = useQuery(LAUNCHESPAST);\n\n  const ToggleFun = (data: any) => {\n    if (data) {\n      setShipsData(data);\n    } else {\n      setShipsData([]);\n    }\n    setOpenModal(!openModal);\n  };\n  const ToggleCompareModal = () => {\n    setOpenCompareModal(!openCompareModal);\n  };\n\n  useEffect(() => {\n    setResultData(data?.launchesPast || []);\n  }, [data]);\n\n  const FilterBuutonHandler = () => {\n    let Data = _.cloneDeep(data?.launchesPast || []);\n    let missionResult = [];\n    let rocketResult = [];\n    if (missionName !== \"\") {\n      missionResult = _.filter(Data, (d) => d.mission_name === missionName);\n    }\n    if (rocketName !== \"\") {\n      rocketResult = _.filter(Data, (d) => d.rocket_name === rocketName);\n    }\n    let Res = _.concat(missionResult, rocketResult);\n    setResultData([...Res]);\n  };\n\n  const CompareCheckBoxHandler = (e: any, data: any) => {\n    let Data = CompareData ? CompareData : [];\n    if (e.target.checked) {\n      Data.push(data);\n    } else {\n      Data = _.filter(Data, (d) => d.mission_name !== data.mission_name);\n    }\n    setCompareData([...Data]);\n  };\n\n  return (\n    <div className=\"main-container\" style={{ margin: \"50px\" }}>\n      <Grid xs={12} container justify=\"flex-start\">\n        <Grid xs={6} item>\n          {CompareData && CompareData.length === 2 && (\n            <Button\n              onClick={() => ToggleCompareModal()}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Compare\n            </Button>\n          )}\n        </Grid>\n\n        <Grid xs={6} container justify=\"flex-end\">\n          <Grid item xs={2} style={{ paddingRight: 5 }}>\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Mission Name\"\n              variant=\"outlined\"\n              defaultValue={missionName}\n              onChange={({ target }) => setMissionName(target.value)}\n            />\n          </Grid>\n          <Grid item xs={2}>\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Rocket Name\"\n              variant=\"outlined\"\n              defaultValue={rocketName}\n              onChange={({ target }) => setRocketName(target.value)}\n            />\n          </Grid>\n          <Grid item xs={2}>\n            <Button\n              onClick={() => FilterBuutonHandler()}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Submit\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid xs={12} item className={`${classes.AccountTableCss} DenseTable`}>\n        <TableContainer component={Paper}>\n          <Table className={classes.denseTable}>\n            <TableHead>\n              <TableRow>\n                <TableCell\n                  style={{ textAlign: \"left\", width: \"10%\" }}\n                ></TableCell>\n                <TableCell style={{ textAlign: \"left\", width: \"10%\" }}>\n                  {\" \"}\n                  Mission name{\" \"}\n                </TableCell>\n                <TableCell style={{ textAlign: \"left\", width: \"15%\" }}>\n                  Launch local date\n                </TableCell>\n                <TableCell style={{ textAlign: \"left\", width: \"15%\" }}>\n                  Site Name Long\n                </TableCell>\n                <TableCell style={{ textAlign: \"left\", width: \"15%\" }}>\n                  Article Link\n                </TableCell>\n                <TableCell style={{ textAlign: \"left\", width: \"15%\" }}>\n                  Video Link\n                </TableCell>\n                <TableCell style={{ textAlign: \"left\", width: \"15%\" }}>\n                  Rocket Name\n                </TableCell>\n                <TableCell style={{ textAlign: \"left\", width: \"15%\" }}>\n                  ships\n                </TableCell>\n              </TableRow>\n            </TableHead>\n          </Table>\n          <div style={{ width: \"100%\", height: 600 }}>\n            <AutoSizer>\n              {({ width, height }) => {\n                return (\n                  <List\n                    ref={ListRef}\n                    height={height}\n                    width={width}\n                    rowHeight={70}\n                    deferredMeasurementCache={cache.current || \"\"}\n                    rowCount={resultData?.length || 0}\n                    rowRenderer={({ key, index, style, parent }) => {\n                      const rowData: any = resultData[index];\n                      return (\n                        <CellMeasurer\n                          key={key}\n                          cache={cache.current}\n                          parent={parent}\n                          columnIndex={0}\n                          rowIndex={index}\n                        >\n                          <div style={style}>\n                            <div className=\"tbody\">\n                              <Table style={{ cursor: \"pointer\" }}>\n                                <TableBody>\n                                  <TableRow>\n                                    <TableCell\n                                      style={{\n                                        textAlign: \"left\",\n                                        width: \"10%\",\n                                        padding: \"0px 10px\",\n                                      }}\n                                    >\n                                      <Checkbox\n                                        onChange={(e) =>\n                                          CompareCheckBoxHandler(e, rowData)\n                                        }\n                                        name=\"checkedB\"\n                                        color=\"primary\"\n                                      />\n                                    </TableCell>\n                                    <TableCell\n                                      style={{\n                                        textAlign: \"left\",\n                                        width: \"10%\",\n                                        padding: \"0px 10px\",\n                                      }}\n                                    >\n                                      {rowData?.mission_name || \"\"}\n                                    </TableCell>\n                                    <TableCell\n                                      style={{\n                                        textAlign: \"left\",\n                                        width: \"15%\",\n                                      }}\n                                    >\n                                      {rowData?.launch_date_local || \"\"}\n                                    </TableCell>\n                                    <TableCell\n                                      style={{\n                                        textAlign: \"left\",\n                                        width: \"15%\",\n                                      }}\n                                    >\n                                      {rowData?.launch_site.site_name_long ||\n                                        \"\"}\n                                    </TableCell>\n                                    <TableCell\n                                      style={{\n                                        textAlign: \"left\",\n                                        width: \"15%\",\n                                      }}\n                                    >\n                                      <div>\n                                        <a\n                                          href={\n                                            rowData?.links.article_link || \"\"\n                                          }\n                                        >\n                                          Open Artical{\" \"}\n                                        </a>\n                                        {}\n                                      </div>\n                                    </TableCell>\n\n                                    <TableCell\n                                      style={{\n                                        textAlign: \"left\",\n                                        width: \"15%\",\n                                      }}\n                                    >\n                                      <a href={rowData?.links.video_link || \"\"}>\n                                        Open Video{\" \"}\n                                      </a>\n                                    </TableCell>\n\n                                    <TableCell\n                                      style={{\n                                        textAlign: \"left\",\n                                        width: \"15%\",\n                                      }}\n                                    >\n                                      {rowData?.rocket?.rocket_name || \"\"}\n                                    </TableCell>\n\n                                    <TableCell\n                                      style={{\n                                        textAlign: \"left\",\n                                        width: \"15%\",\n                                      }}\n                                      onClick={() => ToggleFun(rowData.ships)}\n                                    >\n                                      <VisibilityIcon />\n                                    </TableCell>\n                                  </TableRow>\n                                </TableBody>\n                              </Table>\n                            </div>\n                          </div>\n                        </CellMeasurer>\n                      );\n                    }}\n                  />\n                );\n              }}\n            </AutoSizer>\n          </div>\n        </TableContainer>\n      </Grid>\n      <CommonModal\n        open={openModal}\n        handleClose={() => ToggleFun(null)}\n        modalTitle={\"Ships List\"}\n      >\n        <Ships ShipsData={shipsData} />\n      </CommonModal>\n      <CommonModal\n        open={openCompareModal}\n        handleClose={() => ToggleCompareModal()}\n        modalTitle={\"Compare Result\"}\n      >\n        <CompareDates CompareData={CompareData} />\n      </CommonModal>\n    </div>\n  );\n};\n","/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/component/Spacex/Query.tsx",[],"/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/container/CommonModal.tsx",[],"/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/component/ships/index.tsx",["44","45","46"],"import React, { useEffect, useState, useRef } from \"react\";\nimport MaterialTable from \"material-table\";\n\ninterface Props {\n  ShipsData: any;\n}\nconst columns: any = [\n  { title: \"Name\", field: \"name\" },\n  { title: \"Home Port\", field: \"home_port\" },\n  {\n    title: \"Image\",\n    field: \"image\",\n    render: (rowData: any) => (\n      <img src={rowData.image} height={100} width={200} />\n    ),\n  },\n];\nexport const Ships: React.FC<Props> = ({ ShipsData }) => {\n  const tableRef = useRef();\n\n  return (\n    <div className=\"main-container\" style={{ width: \"100%\" }}>\n      <MaterialTable\n        title=\"ships\"\n        tableRef={tableRef}\n        columns={columns}\n        data={ShipsData}\n        options={{\n          showTitle: false,\n          padding: \"dense\",\n          pageSizeOptions: [5, 10, 15, 20, 25, 50],\n          addRowPosition: \"first\",\n          filtering: false,\n          paging: false,\n          sorting: true,\n          search: false,\n          maxBodyHeight: window.innerHeight - 215,\n        }}\n      />\n    </div>\n  );\n};\n","/Users/tailoramit/Desktop/DemoWorkSpace/Test-Task/src/container/Compare.tsx",["47","48","49"],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":12},{"ruleId":"54","severity":1,"message":"58","line":1,"column":38,"nodeType":"56","messageId":"57","endLine":1,"endColumn":44},{"ruleId":"54","severity":1,"message":"59","line":78,"column":17,"nodeType":"56","messageId":"57","endLine":78,"endColumn":24},{"ruleId":"54","severity":1,"message":"60","line":78,"column":26,"nodeType":"56","messageId":"57","endLine":78,"endColumn":31},{"ruleId":"54","severity":1,"message":"61","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":26},{"ruleId":"54","severity":1,"message":"62","line":1,"column":28,"nodeType":"56","messageId":"57","endLine":1,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":14,"column":7,"nodeType":"65","endLine":14,"endColumn":59},{"ruleId":"54","severity":1,"message":"61","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":26},{"ruleId":"54","severity":1,"message":"62","line":1,"column":28,"nodeType":"56","messageId":"57","endLine":1,"endColumn":36},{"ruleId":"54","severity":1,"message":"58","line":1,"column":38,"nodeType":"56","messageId":"57","endLine":1,"endColumn":44},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]